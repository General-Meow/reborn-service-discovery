# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1
executors:
  my-docker-env:
    docker:
      - image: circleci/openjdk:8-jdk-stretch
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
    working_directory: /tmp/working-directory

jobs:
  checkout:
    executor: my-docker-env

    steps:
      - checkout
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: /tmp/working-directory
          # Must be relative path from root
          paths:
            - ./
            - ./target

  static-analysis:
    executor: my-docker-env
    steps:
      - attach_workspace:
          at: /tmp/working-directory
      - run: 'echo analyse!'
  security-checks:
    executor: my-docker-env
    steps:
      - run: 'echo looking at dependencies against OWASP'
  unit-tests:
    executor: my-docker-env
    steps:
      - attach_workspace:
          at: /tmp/working-directory
      - run: mvn clean
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      # run tests!
      - run: mvn test
  integration-tests:
    executor: my-docker-env
    steps:
      - run: "echo integration test!"
  build:
    executor: my-docker-env
    steps:
      - attach_workspace:
          at: /tmp/working-directory
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: mvn -DskipTests package
      - run: 'cp ./target/$CIRCLE_PROJECT_REPONAME.jar ./target/app.jar'
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - persist_to_workspace:
          root: /tmp/working-directory
          paths:
            - ./
            - ./target

  dockerise-push:
    executor: my-docker-env
    steps:
      - attach_workspace:
          at: /tmp/working-directory
      - run: 'echo dockerise!'
      - setup_remote_docker:
          docker_layer_caching: true
      - run: 'docker login -u $DOCKER_USER -p $DOCKER_PASSWORD'
      - run: 'docker build -t generalmeow/$CIRCLE_PROJECT_REPONAME:$CIRCLE_BUILD_NUM .'
      - run: 'docker tag generalmeow/$CIRCLE_PROJECT_REPONAME:$CIRCLE_BUILD_NUM generalmeow/$CIRCLE_PROJECT_REPONAME:latest'
      - run: 'docker push generalmeow/$CIRCLE_PROJECT_REPONAME:$CIRCLE_BUILD_NUM'
      - run: 'docker push generalmeow/$CIRCLE_PROJECT_REPONAME:latest'
  deploy-to-dev:
    executor: my-docker-env
    steps:
      - run: 'echo deploying to dev!'
      - run: mkdir -p ~/.ssh
      - run: ssh-keyscan -p 2222 paulhoang.com >> ~/.ssh/known_hosts
      - run: ssh paul@paulhoang.com -p 2222 'mkdir -p ~/workspace && cd ~/workspace && git -C reborn-service-discovery pull || git clone https://github.com/General-Meow/reborn-service-discovery.git && cd reborn-service-discovery/k8 && kubectl apply -f reborn-service-discovery-svc.yaml --record && kubectl apply -f reborn-service-discovery-deployment.yaml && kubectl rollout restart deployment/reborn-service-discovery-deployment'
  deploy-to-int:
    executor: my-docker-env
    steps:
      - run: 'echo deploying to int!'
  e2e-tests:
    executor: my-docker-env
    steps:
      - run: 'echo running e2e tests!'
  deploy-to-stage:
    executor: my-docker-env
    steps:
      - run: 'echo deploying to stage!'
  deploy-to-prod:
    executor: my-docker-env
    steps:
      - run: 'echo deploying to prod!'

workflows:
  version: 2.1
  build-and-deploy:
    jobs:
      - checkout
#      - static-analysis:
#          requires:
#            - checkout
#      - security-checks:
#          requires:
#            - checkout
#      - unit-tests:
#          requires:
#            - static-analysis
#            - security-checks
#      - integration-tests:
#          requires:
#            - static-analysis
#            - security-checks
      - build:
          requires:
            - checkout
#            - unit-tests
#            - integration-tests
          filters:
            branches:
                only: master
      - dockerise-push:
          context: com.fluffymango
          requires:
            - build
      - deploy-to-dev:
          requires:
            - dockerise-push

#ONLY IMPLEMENT THIS IS THE FUTURE
#      - deploy-to-int:
#          requires:
#            - deploy-to-dev
#      - e2e-tests:
#          requires:
#            - deploy-to-int
#      - approve-to-stage:
#          type: approval
#          requires:
#            - e2e-tests
#      - deploy-to-stage:
#          requires:
#            - approve-to-stage
#      - approve-to-prod:
#          type: approval
#          requires:
#            - deploy-to-stage
#      - deploy-to-prod:
#          requires:
#            - approve-to-prod
