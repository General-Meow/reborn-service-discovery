# To run this deployment use the command: kubectl apply -f <FILE_NAME.yaml>

# To verify its working, use the pods command: kubectl get pods
# You can also look at the deployment: kubectl describe deployment <deployment_name>

# To update a deployment, once again use the apply command: kubectl apply -f <FILE_NAME.yaml> --record

# To view the update use: kubectl rollout status deployment <DEPLOYMENT_NAME>
apiVersion: apps/v1
kind: Deployment    # A deployment.
metadata:
  name: reborn-service-discovery
spec:
  selector:
    matchLabels:
      app: reborn-service-discovery
  replicas: 2       # is a property of the deployments Spec object that defines how many pods we want to run. So only 2.
  minReadySeconds: 15
  strategy:
    type: RollingUpdate  # specifies the strategy used in this deployment when moving from the current version to the next.
    # The strategy RollingUpdate ensures Zero Downtime deployments.
    rollingUpdate:
      maxUnavailable: 1  # is a property of the RollingUpdate object that specifies the maximum unavailable pods allowed
        # (compared to the desired state) when doing a rolling update. For our deployment which has 2
        # replicas this means that after terminating one Pod, we would still have one pod running,
      # this way keeping our application accessible.

      maxSurge: 1        # MaxSurge is another property of the RollingUpdate object that defines the maximum amount of pods
        # added to a deployment (compared to the desired state). For our deployment, this means that when
      # moving to a new version we can add one pod, which adds up to 3 pods at the same time.

  template:              # specifies the pod template that the Deployment will use to create new pods.
    # Most likely the resemblance with Pods struck you immediately.
    metadata:
      labels:
        app: reborn-service-discovery   # app: sa-frontend the label to use for the pods created by this template.
    spec:
      containers:
      - name: reborn-service-discovery      # a list of containers in this pod
        image: generalmeow/reborn-service-discovery:1
        imagePullPolicy: Always   # when set to Always, it will pull the container images on each redeployment.
        env:
        - name: AN_ENV_VARIABLE
          value: "https://THE_SERVICE_NAME" # set an env var do it will be sent to the docker container. here it uses the k8s dns to look up the ip for the service
        ports:
          - name: sd-port
            containerPort: 8761           # open up port 8761
        livenessProbe:
          httpGet:
            port: sd-port                 # a reference to the port to access the health endpoint, here it points to the declared sd-port
            path: /
          initialDelaySeconds: 15         # time to wait after starting the pod to start the http checks
          timeoutSeconds: 30              # the amount of time to wait before the http request is considered a timeout
      nodeSelector:
        podType: highspec                 # only run this pod spec on a node that has the label podType set to highSpec



